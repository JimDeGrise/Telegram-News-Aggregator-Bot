#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–æ–≤—ã—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤.
–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–º–ø–æ—Ä—Ç—ã –∏ –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.
"""

import os
import sys

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_imports():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"""
    try:
        import main
        import handlers.help
        import handlers.commands
        import handlers.antiflood
        import handlers.content_filter
        print("‚úì –í—Å–µ –º–æ–¥—É–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        return True
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False

def test_handler_configuration():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤"""
    try:
        from handlers.commands import setup_admin, is_admin
        from handlers.antiflood import setup_antiflood_config
        from handlers.content_filter import setup_content_filter_config
        
        # –¢–µ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∞
        setup_admin(12345)
        assert is_admin(12345) == True
        assert is_admin(54321) == False
        print("‚úì –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–¥–º–∏–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        # –¢–µ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω—Ç–∏—Ñ–ª—É–¥–∞
        setup_antiflood_config(
            admin_id=12345,
            msg_limit=3,
            time_win=30,
            warn_threshold=2,
            mute_dur=120
        )
        print("‚úì –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–Ω—Ç–∏—Ñ–ª—É–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        # –¢–µ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        setup_content_filter_config(
            admin_id=12345,
            bad_words=['—Ç–µ—Å—Ç', '—Å–ø–∞–º'],
            bad_links=['example\\.com', 'badsite']
        )
        print("‚úì –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        return True
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

def test_middleware_logic():
    """–¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ middleware"""
    try:
        from handlers.antiflood import AntiFloodMiddleware
        from handlers.content_filter import ContentFilterMiddleware
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
        antiflood = AntiFloodMiddleware()
        content_filter = ContentFilterMiddleware()
        
        # –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–∞–Ω–¥
        assert antiflood.is_command('/start') == True
        assert antiflood.is_command('–ø—Ä–∏–≤–µ—Ç') == False
        print("‚úì –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥ –≤ –∞–Ω—Ç–∏—Ñ–ª—É–¥–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        assert content_filter.is_command('/help') == True
        assert content_filter.is_command('–æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ') == False
        print("‚úì –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥ –≤ —Ñ–∏–ª—å—Ç—Ä–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
        assert content_filter.extract_command('/start') == '/start'
        assert content_filter.extract_command('/help@botname') == '/help'
        assert content_filter.extract_command('/ping arg1 arg2') == '/ping'
        print("‚úì –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        return True
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –ª–æ–≥–∏–∫–∏ middleware: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –Ω–æ–≤—ã—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤...")
    print("=" * 50)
    
    tests = [
        test_imports,
        test_handler_configuration,
        test_middleware_logic,
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        try:
            if test():
                passed += 1
            print()
        except Exception as e:
            print(f"‚úó –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ {test.__name__}: {e}")
            print()
    
    print("=" * 50)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!")
        return 0
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        return 1

if __name__ == "__main__":
    exit(main())