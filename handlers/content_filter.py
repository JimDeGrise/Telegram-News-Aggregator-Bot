from aiogram import Router, BaseMiddleware
from aiogram.types import Message, TelegramObject
from typing import Dict, Any, Callable, Awaitable, Optional, List, Set
import re

router = Router()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
admin_user_id: Optional[int] = None
forbidden_words: Set[str] = set()
forbidden_link_patterns: List[str] = []
allowed_commands: Set[str] = {
    '/start', '/help', '/ping', '/latest', '/news', '/filter', '/source', 
    '/sources', '/stats', '/arc_filter', '/src_stat', '/arc_months', 
    '/archive_now', '/fetch'
}


def setup_content_filter_config(admin_id: Optional[int], bad_words: List[str] = None, 
                               bad_links: List[str] = None, commands: List[str] = None):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    global admin_user_id, forbidden_words, forbidden_link_patterns, allowed_commands
    admin_user_id = admin_id
    
    if bad_words:
        forbidden_words = {word.lower() for word in bad_words}
    
    if bad_links:
        forbidden_link_patterns = bad_links
    
    if commands:
        allowed_commands = set(commands)


class ContentFilterMiddleware(BaseMiddleware):
    def __init__(self):
        pass

    def is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
        return admin_user_id is not None and user_id == admin_user_id

    def is_command(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π"""
        return text.startswith('/')

    def extract_command(self, text: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        if not text.startswith('/'):
            return ''
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –ø–æ—Å–ª–µ /
        parts = text.split()
        if not parts:
            return ''
        
        command = parts[0]
        # –£–±–∏—Ä–∞–µ–º @bot_username –µ—Å–ª–∏ –µ—Å—Ç—å
        if '@' in command:
            command = command.split('@')[0]
        
        return command

    def check_forbidden_words(self, text: str) -> List[str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞"""
        if not forbidden_words:
            return []
        
        text_lower = text.lower()
        found_words = []
        
        for word in forbidden_words:
            if word in text_lower:
                found_words.append(word)
        
        return found_words

    def check_forbidden_links(self, text: str) -> List[str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏"""
        if not forbidden_link_patterns:
            return []
        
        found_patterns = []
        
        for pattern in forbidden_link_patterns:
            try:
                if re.search(pattern, text, re.IGNORECASE):
                    found_patterns.append(pattern)
            except re.error:
                # –ï—Å–ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫ –ø—Ä–æ—Å—Ç—É—é –ø–æ–¥—Å—Ç—Ä–æ–∫—É
                if pattern.lower() in text.lower():
                    found_patterns.append(pattern)
        
        return found_patterns

    def check_command_validity(self, text: str) -> tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã"""
        if not self.is_command(text):
            return True, ''  # –ù–µ –∫–æ–º–∞–Ω–¥–∞ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        
        command = self.extract_command(text)
        if not command:
            return False, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞'
        
        if command not in allowed_commands:
            return False, f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}'
        
        return True, ''

    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        if not isinstance(event, Message) or not event.from_user or not event.text:
            return await handler(event, data)

        user_id = event.from_user.id
        text = event.text

        # –ê–¥–º–∏–Ω-–±–∞–π–ø–∞—Å
        if self.is_admin(user_id):
            return await handler(event, data)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥
        if self.is_command(text):
            is_valid, error_msg = self.check_command_validity(text)
            if not is_valid:
                await event.answer(f"‚ùå {error_msg}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")
                return  # –ë–ª–æ–∫–∏—Ä—É–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É
            
            # –ö–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Ö–æ–¥—è—Ç –±–µ–∑ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
            return await handler(event, data)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ-–∫–æ–º–∞–Ω–¥)
        forbidden_found = self.check_forbidden_words(text)
        if forbidden_found:
            await event.answer(
                f"üö´ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞: {', '.join(forbidden_found)}\n"
                "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ."
            )
            return  # –ë–ª–æ–∫–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ-–∫–æ–º–∞–Ω–¥)
        forbidden_links = self.check_forbidden_links(text)
        if forbidden_links:
            await event.answer(
                "üö´ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –∏–ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã.\n"
                "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ."
            )
            return  # –ë–ª–æ–∫–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ

        return await handler(event, data)


# –≠–∫–∑–µ–º–ø–ª—è—Ä middleware –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ main.py
content_filter_middleware = ContentFilterMiddleware()