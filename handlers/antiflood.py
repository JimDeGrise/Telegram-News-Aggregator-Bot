from aiogram import Router, BaseMiddleware
from aiogram.types import Message, TelegramObject
from typing import Dict, Any, Callable, Awaitable, Optional
import time
from collections import defaultdict

router = Router()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
admin_user_id: Optional[int] = None
message_limit: int = 5  # –õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
time_window: int = 60   # –í—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
warning_threshold: int = 3  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –¥–æ –º—É—Ç–∞
mute_duration: int = 300  # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º—É—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö


def setup_antiflood_config(admin_id: Optional[int], msg_limit: int = 5, time_win: int = 60, 
                          warn_threshold: int = 3, mute_dur: int = 300):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–Ω—Ç–∏—Ñ–ª—É–¥–∞"""
    global admin_user_id, message_limit, time_window, warning_threshold, mute_duration
    admin_user_id = admin_id
    message_limit = msg_limit
    time_window = time_win
    warning_threshold = warn_threshold
    mute_duration = mute_dur


class AntiFloodMiddleware(BaseMiddleware):
    def __init__(self):
        # –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.user_messages: Dict[int, list] = defaultdict(list)
        self.user_warnings: Dict[int, int] = defaultdict(int)
        self.muted_until: Dict[int, float] = defaultdict(float)
        self.warned_users: set = set()  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤ —Ç–µ–∫—É—â–µ–º —Ü–∏–∫–ª–µ

    def is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
        return admin_user_id is not None and user_id == admin_user_id

    def is_command(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π"""
        return text.startswith('/')

    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        if not isinstance(event, Message) or not event.from_user:
            return await handler(event, data)

        user_id = event.from_user.id
        current_time = time.time()

        # –ê–¥–º–∏–Ω-–±–∞–π–ø–∞—Å
        if self.is_admin(user_id):
            return await handler(event, data)

        # –ö–æ–º–∞–Ω–¥–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø–æ–¥–≤–µ—Ä–≥–∞—é—Ç—Å—è –∞–Ω—Ç–∏—Ñ–ª—É–¥—É
        if event.text and self.is_command(event.text):
            return await handler(event, data)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –º—É—Ç–µ
        if user_id in self.muted_until and current_time < self.muted_until[user_id]:
            remaining_time = int(self.muted_until[user_id] - current_time)
            if user_id not in self.warned_users:
                await event.answer(f"üîá –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –º—É—Ç–µ. –û—Å—Ç–∞–ª–æ—Å—å: {remaining_time} —Å–µ–∫.")
                self.warned_users.add(user_id)
            return  # –ë–ª–æ–∫–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ

        # –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –º—É—Ç–æ–≤
        if user_id in self.muted_until and current_time >= self.muted_until[user_id]:
            del self.muted_until[user_id]
            self.warned_users.discard(user_id)

        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞
        messages = self.user_messages[user_id]
        messages[:] = [msg_time for msg_time in messages if current_time - msg_time <= time_window]

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        messages.append(current_time)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        if len(messages) > message_limit:
            warnings = self.user_warnings[user_id]
            
            if warnings < warning_threshold:
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
                self.user_warnings[user_id] += 1
                remaining_warnings = warning_threshold - self.user_warnings[user_id]
                
                if remaining_warnings > 0:
                    await event.answer(
                        f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ {self.user_warnings[user_id]}/{warning_threshold}: "
                        f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π! –õ–∏–º–∏—Ç: {message_limit} —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ {time_window} —Å–µ–∫.\n"
                        f"–û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –¥–æ –º—É—Ç–∞: {remaining_warnings}"
                    )
                else:
                    # –ú—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    self.muted_until[user_id] = current_time + mute_duration
                    self.warned_users.add(user_id)
                    await event.answer(
                        f"üîá –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –ø–æ–ª—É—á–∏–ª–∏ –º—É—Ç –Ω–∞ {mute_duration} —Å–µ–∫—É–Ω–¥.\n"
                        f"–ü–æ—Å–ª–µ —Å–Ω—è—Ç–∏—è –º—É—Ç–∞ —Å—á–µ—Ç—á–∏–∫ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π —Å–±—Ä–æ—Å–∏—Ç—Å—è."
                    )
                    # –°–±—Ä–æ—Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –ø–æ—Å–ª–µ –º—É—Ç–∞ (–Ω–µ —Å—Ä–∞–∑—É, –∞ –∫–æ–≥–¥–∞ –º—É—Ç –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è)
                return  # –ë–ª–æ–∫–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            else:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –¥–æ—Å—Ç–∏–≥ –ª–∏–º–∏—Ç–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π, –ø—Ä–æ—Å—Ç–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
                if user_id not in self.warned_users:
                    await event.answer("üîá –°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –∏–∑-–∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞.")
                    self.warned_users.add(user_id)
                return  # –ë–ª–æ–∫–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ

        # –°–±—Ä–æ—Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–µ–≤—ã—à–∞–ª –ª–∏–º–∏—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞
        if len(messages) <= message_limit and user_id in self.user_warnings:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è
            last_violation_time = max(messages) if messages else 0
            if current_time - last_violation_time > time_window:
                del self.user_warnings[user_id]
                self.warned_users.discard(user_id)

        return await handler(event, data)


# –≠–∫–∑–µ–º–ø–ª—è—Ä middleware –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ main.py
antiflood_middleware = AntiFloodMiddleware()